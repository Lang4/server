#include "Des.h"
#include <string.h>
//#include <iostream>
//using namespace std;

uint32_t DF_key[]={0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32,		0x10, 0x89, 0xab, 0xcd, 0xef, 0x01, 0x23, 0x45, 0x67};

uint32_t bytebit[]={128, 64, 32, 16, 8, 4, 2, 1};

uint32_t bigbyte[]={0x800000, 0x400000, 0x200000, 0x100000, 0x80000, 0x40000, 0x20000, 0x10000, 0x8000,		0x4000, 0x2000, 0x1000, 0x800, 0x400, 0x200, 0x100, 0x80, 0x40, 0x20, 0x10, 0x8, 0x4, 0x2, 0x1};

uint32_t pc1[]={56, 48, 40, 32, 24, 16, 8, 0, 57, 49, 41, 33, 25, 17, 9, 1, 58, 50, 42, 34, 26, 18, 10, 2,
	59, 51, 43, 35, 62, 54, 46, 38, 30, 22, 14, 6, 61, 53, 45, 37, 29, 21, 13, 5, 60, 52, 44, 36, 28, 20, 12,
	4, 27, 19, 11, 3};
uint32_t totrot[]={1, 2, 4, 6, 8, 10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28};

uint32_t pc2[]={13, 16, 10, 23, 0, 4, 2, 27, 14, 5, 20, 9, 22, 18, 11, 3, 25, 7, 15, 6, 26, 19, 12, 1, 40,
	51, 30, 36, 46, 54, 29, 39, 50, 44, 32, 47, 43, 48, 38, 55, 33, 52, 45, 41, 49, 35, 28, 31};

uint32_t SP1[] = { 0x01010400, 0x00000000, 0x00010000, 0x01010404, 0x01010004, 0x00010404, 0x00000004,
	0x00010000, 0x00000400, 0x01010400, 0x01010404, 0x00000400, 0x01000404, 0x01010004, 0x01000000, 0x00000004,
	0x00000404, 0x01000400, 0x01000400, 0x00010400, 0x00010400, 0x01010000, 0x01010000, 0x01000404, 0x00010004,
	0x01000004, 0x01000004, 0x00010004, 0x00000000, 0x00000404, 0x00010404, 0x01000000, 0x00010000, 0x01010404,
	0x00000004, 0x01010000, 0x01010400, 0x01000000, 0x01000000, 0x00000400, 0x01010004, 0x00010000, 0x00010400,
	0x01000004, 0x00000400, 0x00000004, 0x01000404, 0x00010404, 0x01010404, 0x00010004, 0x01010000, 0x01000404,
	0x01000004, 0x00000404, 0x00010404, 0x01010400, 0x00000404, 0x01000400, 0x01000400, 0x00000000, 0x00010004,
	0x00010400, 0x00000000, 0x01010004 };

uint32_t SP2[] = { 0x80108020, 0x80008000, 0x00008000, 0x00108020, 0x00100000, 0x00000020, 0x80100020,
	0x80008020, 0x80000020, 0x80108020, 0x80108000, 0x80000000, 0x80008000, 0x00100000, 0x00000020, 0x80100020,
	0x00108000, 0x00100020, 0x80008020, 0x00000000, 0x80000000, 0x00008000, 0x00108020, 0x80100000, 0x00100020,
	0x80000020, 0x00000000, 0x00108000, 0x00008020, 0x80108000, 0x80100000, 0x00008020, 0x00000000, 0x00108020,
	0x80100020, 0x00100000, 0x80008020, 0x80100000, 0x80108000, 0x00008000, 0x80100000, 0x80008000, 0x00000020,
	0x80108020, 0x00108020, 0x00000020, 0x00008000, 0x80000000, 0x00008020, 0x80108000, 0x00100000, 0x80000020,
	0x00100020, 0x80008020, 0x80000020, 0x00100020, 0x00108000, 0x00000000, 0x80008000, 0x00008020, 0x80000000,
	0x80100020, 0x80108020, 0x00108000 };

uint32_t SP3[] = { 0x00000208, 0x08020200, 0x00000000, 0x08020008, 0x08000200, 0x00000000, 0x00020208,
	0x08000200, 0x00020008, 0x08000008, 0x08000008, 0x00020000, 0x08020208, 0x00020008, 0x08020000, 0x00000208,
	0x08000000, 0x00000008, 0x08020200, 0x00000200, 0x00020200, 0x08020000, 0x08020008, 0x00020208, 0x08000208,
	0x00020200, 0x00020000, 0x08000208, 0x00000008, 0x08020208, 0x00000200, 0x08000000, 0x08020200, 0x08000000,
	0x00020008, 0x00000208, 0x00020000, 0x08020200, 0x08000200, 0x00000000, 0x00000200, 0x00020008, 0x08020208,
	0x08000200, 0x08000008, 0x00000200, 0x00000000, 0x08020008, 0x08000208, 0x00020000, 0x08000000, 0x08020208,
	0x00000008, 0x00020208, 0x00020200, 0x08000008, 0x08020000, 0x08000208, 0x00000208, 0x08020000, 0x00020208,
	0x00000008, 0x08020008, 0x00020200 };

uint32_t SP4[] = { 0x00802001, 0x00002081, 0x00002081, 0x00000080, 0x00802080, 0x00800081, 0x00800001,
	0x00002001, 0x00000000, 0x00802000, 0x00802000, 0x00802081, 0x00000081, 0x00000000, 0x00800080, 0x00800001,
	0x00000001, 0x00002000, 0x00800000, 0x00802001, 0x00000080, 0x00800000, 0x00002001, 0x00002080, 0x00800081,
	0x00000001, 0x00002080, 0x00800080, 0x00002000, 0x00802080, 0x00802081, 0x00000081, 0x00800080, 0x00800001,
	0x00802000, 0x00802081, 0x00000081, 0x00000000, 0x00000000, 0x00802000, 0x00002080, 0x00800080, 0x00800081,
	0x00000001, 0x00802001, 0x00002081, 0x00002081, 0x00000080, 0x00802081, 0x00000081, 0x00000001, 0x00002000,
	0x00800001, 0x00002001, 0x00802080, 0x00800081, 0x00002001, 0x00002080, 0x00800000, 0x00802001, 0x00000080,
	0x00800000, 0x00002000, 0x00802080 };

uint32_t SP5[] = { 0x00000100, 0x02080100, 0x02080000, 0x42000100, 0x00080000, 0x00000100, 0x40000000,
	0x02080000, 0x40080100, 0x00080000, 0x02000100, 0x40080100, 0x42000100, 0x42080000, 0x00080100, 0x40000000,
	0x02000000, 0x40080000, 0x40080000, 0x00000000, 0x40000100, 0x42080100, 0x42080100, 0x02000100, 0x42080000,
	0x40000100, 0x00000000, 0x42000000, 0x02080100, 0x02000000, 0x42000000, 0x00080100, 0x00080000, 0x42000100,
	0x00000100, 0x02000000, 0x40000000, 0x02080000, 0x42000100, 0x40080100, 0x02000100, 0x40000000, 0x42080000,
	0x02080100, 0x40080100, 0x00000100, 0x02000000, 0x42080000, 0x42080100, 0x00080100, 0x42000000, 0x42080100,
	0x02080000, 0x00000000, 0x40080000, 0x42000000, 0x00080100, 0x02000100, 0x40000100, 0x00080000, 0x00000000,
	0x40080000, 0x02080100, 0x40000100 };

uint32_t SP6[] = { 0x20000010, 0x20400000, 0x00004000, 0x20404010, 0x20400000, 0x00000010, 0x20404010,
	0x00400000, 0x20004000, 0x00404010, 0x00400000, 0x20000010, 0x00400010, 0x20004000, 0x20000000, 0x00004010,
	0x00000000, 0x00400010, 0x20004010, 0x00004000, 0x00404000, 0x20004010, 0x00000010, 0x20400010, 0x20400010,
	0x00000000, 0x00404010, 0x20404000, 0x00004010, 0x00404000, 0x20404000, 0x20000000, 0x20004000, 0x00000010,
	0x20400010, 0x00404000, 0x20404010, 0x00400000, 0x00004010, 0x20000010, 0x00400000, 0x20004000, 0x20000000,
	0x00004010, 0x20000010, 0x20404010, 0x00404000, 0x20400000, 0x00404010, 0x20404000, 0x00000000, 0x20400010,
	0x00000010, 0x00004000, 0x20400000, 0x00404010, 0x00004000, 0x00400010, 0x20004010, 0x00000000, 0x20404000,
	0x20000000, 0x00400010, 0x20004010 };

uint32_t SP7[] = { 0x00200000, 0x04200002, 0x04000802, 0x00000000, 0x00000800, 0x04000802, 0x00200802,
	0x04200800, 0x04200802, 0x00200000, 0x00000000, 0x04000002, 0x00000002, 0x04000000, 0x04200002, 0x00000802,
	0x04000800, 0x00200802, 0x00200002, 0x04000800, 0x04000002, 0x04200000, 0x04200800, 0x00200002, 0x04200000,
	0x00000800, 0x00000802, 0x04200802, 0x00200800, 0x00000002, 0x04000000, 0x00200800, 0x04000000, 0x00200800,
	0x00200000, 0x04000802, 0x04000802, 0x04200002, 0x04200002, 0x00000002, 0x00200002, 0x04000000, 0x04000800,
	0x00200000, 0x04200800, 0x00000802, 0x00200802, 0x04200800, 0x00000802, 0x04000002, 0x04200802, 0x04200000,
	0x00200800, 0x00000000, 0x00000002, 0x04200802, 0x00000000, 0x00200802, 0x04200000, 0x00000800, 0x04000002,
	0x04000800, 0x00000800, 0x00200002 };

uint32_t SP8[] = { 0x10001040, 0x00001000, 0x00040000, 0x10041040, 0x10000000, 0x10001040, 0x00000040,
	0x10000000, 0x00040040, 0x10040000, 0x10041040, 0x00041000, 0x10041000, 0x00041040, 0x00001000, 0x00000040,
	0x10040000, 0x10000040, 0x10001000, 0x00001040, 0x00041000, 0x00040040, 0x10040040, 0x10041000, 0x00001040,
	0x00000000, 0x00000000, 0x10040040, 0x10000040, 0x10001000, 0x00041040, 0x00040000, 0x00041040, 0x00040000,
	0x10041000, 0x00001000, 0x00000040, 0x10040040, 0x00001000, 0x00041040, 0x10001000, 0x00000040, 0x10000040,
	0x10040000, 0x10040040, 0x10000000, 0x00040000, 0x10001040, 0x00000000, 0x10041040, 0x00040040, 0x10000040,
	0x10040000, 0x10001000, 0x10001040, 0x00000000, 0x10041040, 0x00041000, 0x00041000, 0x00001040, 0x00001040,
	0x00040040, 0x10000000, 0x10041000 };

void Des::setDes(uint8_t* pkey)
{
	if(pkey)
	{
		generateWorkingKey(true,pkey,0,m_encKey);
//		for(int i=0; i<32; ++i)
//			cout<<(int)m_encKey[i]<<" ";
//		cout<<endl;
		generateWorkingKey(false,pkey,0,m_decKey);
//		for(int i=0; i<32; ++i)
//			cout<<(int)m_decKey[i]<<" ";
//		cout<<endl;
	}
}

void Des::decrypt(uint8_t* pblock,int index)
{
	desFunc(m_decKey,pblock,index,pblock,index);
}

void Des::encrypt(uint8_t* pblock,int index)
{
	desFunc(m_encKey,pblock,index,pblock,index);
}

void Des::generateWorkingKey(bool encrypting,uint8_t* key,int off, uint32_t* newKey)
{
	bool pc1m[56] = {0}; 
	uint32_t pcr[56] = {0};

	uint32_t l=0;
	for (int j = 0; j < 56; j++)
	{
		l = pc1[j];

		pc1m[j] = ((key[off + (l >> 3)] & bytebit[l & 0x7]) != 0);
	}

	for (int i = 0; i < 16; i++)
	{
		uint32_t m = 0;
		uint32_t n = 0;

		if (encrypting)
		{
			m = i << 1;
		}
		else
		{
			m = (15 - i) << 1;
		}

		n = m + 1;
		newKey[m] = newKey[n] = 0;

		for (int j = 0; j < 28; j++)
		{
			l = j + totrot[i];
			if (l < 28)
			{
				pcr[j] = pc1m[l];
			}
			else
			{
				pcr[j] = pc1m[l - 28];
			}
		}

		for (int j = 28; j < 56; j++)
		{
			l = j + totrot[i];
			if (l < 56)
			{
				pcr[j] = pc1m[l];
			}
			else
			{
				pcr[j] = pc1m[l - 28];
			}
		}

		for (int j = 0; j < 24; j++)
		{
			if (pcr[pc2[j]])
			{
				newKey[m] |= bigbyte[j];
			}

			if (pcr[pc2[j + 24]])
			{
				newKey[n] |= bigbyte[j];
			}
		}
	}

	//
	// store the processed key
	//
	for (int i = 0; i != 32; i += 2)
	{
		uint32_t i1 = 0;
		uint32_t i2 = 0;

		i1 = newKey[i];
		i2 = newKey[i + 1];

		newKey[i] = ((i1 & 0x00fc0000) << 6) | ((i1 & 0x00000fc0) << 10) | ((i2 & 0x00fc0000) >> 10) | ((i2 & 0x00000fc0) >> 6);

		newKey[i + 1] = ((i1 & 0x0003f000) << 12) | ((i1 & 0x0000003f) << 16) | ((i2 & 0x0003f000) >> 4) | (i2 & 0x0000003f);
	}
	//		return newKey;
}

void Des::desFunc(uint32_t* wKey, uint8_t* inp, int inOff,uint8_t* out, int outOff)
{
	uint32_t work = 0;
	uint32_t right = 0;
	uint32_t left = 0;

	left = (inp[inOff + 0] & 0xff) << 24;
	left |= (inp[inOff + 1] & 0xff) << 16;
	left |= (inp[inOff + 2] & 0xff) << 8;
	left |= (inp[inOff + 3] & 0xff);

	right = (inp[inOff + 4] & 0xff) << 24;
	right |= (inp[inOff + 5] & 0xff) << 16;
	right |= (inp[inOff + 6] & 0xff) << 8;
	right |= (inp[inOff + 7] & 0xff);

	work = ((left >> 4) ^ right) & 0x0f0f0f0f;
	right ^= work;
	left ^= (work << 4);
	work = ((left >> 16) ^ right) & 0x0000ffff;
	right ^= work;
	left ^= (work << 16);
	work = ((right >> 2) ^ left) & 0x33333333;
	left ^= work;
	right ^= (work << 2);
	work = ((right >> 8) ^ left) & 0x00ff00ff;
	left ^= work;
	right ^= (work << 8);
	right = ((right << 1) | ((right >> 31) & 1)) & 0xffffffff;
	work = (left ^ right) & 0xaaaaaaaa;
	left ^= work;
	right ^= work;
	left = ((left << 1) | ((left >> 31) & 1)) & 0xffffffff;

	for (uint32_t round = 0; round < 8; round++)
	{
		uint32_t fval = 0;

		work = (right << 28) | (right >> 4);
		work ^= wKey[round * 4 + 0];
		fval = SP7[work & 0x3f];
		fval |= SP5[(work >> 8) & 0x3f];
		fval |= SP3[(work >> 16) & 0x3f];
		fval |= SP1[(work >> 24) & 0x3f];
		work = right ^ wKey[round * 4 + 1];
		fval |= SP8[work & 0x3f];
		fval |= SP6[(work >> 8) & 0x3f];
		fval |= SP4[(work >> 16) & 0x3f];
		fval |= SP2[(work >> 24) & 0x3f];
		left ^= fval;
		work = (left << 28) | (left >> 4);
		work ^= wKey[round * 4 + 2];
		fval = SP7[work & 0x3f];
		fval |= SP5[(work >> 8) & 0x3f];
		fval |= SP3[(work >> 16) & 0x3f];
		fval |= SP1[(work >> 24) & 0x3f];
		work = left ^ wKey[round * 4 + 3];
		fval |= SP8[work & 0x3f];
		fval |= SP6[(work >> 8) & 0x3f];
		fval |= SP4[(work >> 16) & 0x3f];
		fval |= SP2[(work >> 24) & 0x3f];
		right ^= fval;
	}

	right = (right << 31) | (right >> 1);
	work = (left ^ right) & 0xaaaaaaaa;
	left ^= work;
	right ^= work;
	left = (left << 31) | (left >> 1);
	work = ((left >> 8) ^ right) & 0x00ff00ff;
	right ^= work;
	left ^= (work << 8);
	work = ((left >> 2) ^ right) & 0x33333333;
	right ^= work;
	left ^= (work << 2);
	work = ((right >> 16) ^ left) & 0x0000ffff;
	left ^= work;
	right ^= (work << 16);
	work = ((right >> 4) ^ left) & 0x0f0f0f0f;
	left ^= work;
	right ^= (work << 4);
//	cout<<"r="<<right<<" "<<"l="<<left<<endl;
//	cout<<"in "<<(int)inp[0]<<" "<<(int)inp[1]<<" "<<(int)inp[2]<<" "<<(int)inp[3]<<" "<<(int)inp[4]<<" "<<(int)inp[5]<<" "<<(int)inp[6]<<" "<<(int)inp[7]<<endl;
	out[outOff + 0] = ((right >> 24) & 0xff);
	out[outOff + 1] = ((right >> 16) & 0xff);
	out[outOff + 2] = ((right >> 8) & 0xff);
	out[outOff + 3] = (right & 0xff);
	out[outOff + 4] = ((left >> 24) & 0xff);
	out[outOff + 5] = ((left >> 16) & 0xff);
	out[outOff + 6] = ((left >> 8) & 0xff);
	out[outOff + 7] = (left & 0xff);
//	cout<<"out "<<(int)out[0]<<" "<<(int)out[1]<<" "<<(int)out[2]<<" "<<(int)out[3]<<" "<<(int)out[4]<<" "<<(int)out[5]<<" "<<(int)out[6]<<" "<<(int)out[7]<<endl;
}
